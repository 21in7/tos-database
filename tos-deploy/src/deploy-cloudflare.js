const
    sharedVariables = require("./shared-variables"),
    cf = require('cloudflare')({ email: sharedVariables.CF_EMAIL, key: sharedVariables.CF_KEY}),
    fs = require('fs'),
    path = require('path'),
    shared = require("./shared"),
    xmlToJson = require('xml2json')
;

// Add timestamp to logs
require('console-stamp')(console, 'yyyy-mm-dd HH:MM:ss');

(async function() {
    shared.singletonLock(true);

    console.log('+========================================================================+');
    console.log('| Cleaning CloudFlare...                                                 |');
    console.log('+========================================================================+');

    let urls;

    // Clear "app" AssetGroup cache
    let ngsw = JSON.parse(fs.readFileSync(path.join('..', 'web', 'dist', 'web', 'ngsw.js')));
    let ngswAssetGroup = ngsw.assetGroups.find(value => value.name === 'app');

    urls = ngswAssetGroup.urls.concat(['/assets/images/logo_imc.png', '/assets/images/logo_tos.png']);
    urls = urls.concat(urls.map(value => value + '?ngsw-hash=' + ngsw.hashTable[value]));
    urls = urls.concat(['', '/manifest.json', '/ngsw.js']);

    await purgeFilesByUrl(null, urls.map(value => 'https://tos.guru' + value));

    // Clear sitemap
    for (let region of shared.REGIONS) {
        let sitemap = fs.readFileSync(path.join('..', 'web', 'dist', 'web', 'assets', 'sitemap', region.toLowerCase() + '.sitemap.xml'));
            sitemap = JSON.parse(xmlToJson.toJson(sitemap));

        urls = sitemap.urlset.url.map(value => value.loc);
        urls = [
            'https://tos.guru/' + region.toLowerCase(),
            'https://tos.guru/' + region.toLowerCase() + '/database',
            'https://tos.guru/' + region.toLowerCase() + '/home',
            'https://tos.guru/' + region.toLowerCase() + '/simulator',
        ].concat(urls);

        // CloudFlare has a limit of 1200 requests every 5 minutes
        console.log(`[${ region }] Purging files by URL...`);
        await purgeFilesByUrl(region, urls);

        console.log(`[${ region }] Purging files by URL... Complete!`);
        await new Promise((resolve) => setTimeout(() => resolve(), 5 * 61 * 1000));
    }

    shared.singletonUnlock();
})();

//======================================================================================================================
// CloudFlare
//======================================================================================================================
async function purgeFilesByUrl(region, files) {
    let request = 0;

    for (let start = 0; start < files.length; start += 30) {
        let end = Math.min(start + 30, files.length);

        console.log(`[${ region }] Purging URLs ${ start } ... ${ end } #${ ++request }`);
        let response = await cf.zones.purgeCache(sharedVariables.CF_ZONE, { files: files.slice(start, end) });

        if (!response.success)
            shared.slackError('Failed to purge cache //TODO: explode and tell slack', response);
    }
}

// TODO: X singleton lock/unlock is using filename wrongly, as all point to shared.js
// TODO: X clear main links first before the rest of the sitemap
// TODO: launch cloudflare in background. sometimes it is crashing with 400 error

// TODO: player issues
// TODO: X no ngsw.json exists, so old clients can't update. need to generate both
// TODO: X simulator page isn't being generated by tos-html
// TODO: add a 'Checking for updates...' at the top message maybe?
